/**
 * Firestore security rules for SocialDashboard
 * These rules control access to Firestore collections and documents,
 * ensuring users can only access their own data while allowing public
 * access to RSS feed configuration.
 */

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Base rule: deny access by default
    match /{document=**} {
      allow read, write: if false;
    }
    
    // User document rules with public read access to RSS feed configuration
    match /users/{userId} {
      // Anyone can read RSS feed data
      allow read: if 
        // Either the user is authenticated and it's their own data
        (request.auth != null && request.auth.uid == userId) ||
        // Or only accessing the youtubeRssUrl field in connections
        (request.path[0] == 'databases' && 
         request.path[2] == 'documents' &&
         request.path[4] == 'users' &&
         resource.data.connections != null);
      
      // Allow users to create their own documents
      allow create: if request.auth != null && 
                     request.auth.uid == userId;
      
      // Allow users to update their own documents with validation
      allow update: if request.auth != null && 
                     request.auth.uid == userId;
      
      // Profile updates validation
      match /profile/{profileId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Connections subcollection for platform integrations - public read access
      match /connections/{connectionId} {
        allow read: if true; // Public read access to RSS feeds
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Calendar events collection - users can only access their own events
    match /calendar-events/{eventId} {
      // Allow users to read their own calendar events
      allow read: if request.auth != null && 
                   resource.data.userId == request.auth.uid;
      
      // Temporarily allow all authenticated users to create events for debugging
      allow create: if request.auth != null;
      
      // Allow users to create events with proper validation
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.title is string &&
                     request.resource.data.description is string &&
                     request.resource.data.startDate is string &&
                     (request.resource.data.source == 'manual' || 
                      request.resource.data.source == 'ai');
      
      // Allow users to update their own events
      allow update: if request.auth != null && 
                     resource.data.userId == request.auth.uid &&
                     request.resource.data.userId == resource.data.userId;
      
      // Allow users to delete their own events                
      allow delete: if request.auth != null && 
                     resource.data.userId == request.auth.uid;
      
      // Allow admin users to read all events
      allow read: if request.auth != null &&
                   request.auth.token.admin == true;
    }
    
    // YouTube analytics collection
    match /youtube-analytics/{docId} {
      allow read: if request.auth != null && 
                    docId.matches(request.auth.uid + '.*');
      allow write: if request.auth != null && 
                     docId.matches(request.auth.uid + '.*');
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if false; // Restrict admin data to backend only
    }
  }
}